SENTENCE
  : FUNCT                       
  | PRINT                       
  | DECLARATION PTOCOMA         
  | CHANGE_VALUE_STRUCT         
  | ASSIGNMENT PTOCOMA          
  | SENTENCE_IF                 
  | SENTENCE_WHILE              
  | SENTENCE_DO_WHILE           
  | SENTENCE_SWITCH             
  | SENTENCE_FOR                
  | RETUR                       
  | BREAKS                      
  | CONTINU                     
  | CALL_FUNCTION PTOCOMA       
  | POST_FIXED PTOCOMA          
  | TEMPLATE_STRUCT             
  | CREATE_STRUCT               
  | METHODS PTOCOMA             
  | error PTOCOMA               { console.log("error"); }
  | error KEYCLS                { console.log("error"); }
;


<script>
    Fuente=document.getElementById('input');
    /*
    document.getElementById('btn-compile').onclick = function(){
      var Codigo = Fuente.value;
      arbolast(Codigo);
    }
    */
    function arbolast(content){
      treeData = [];
      if (document.getElementById("grafo")) {
        document.getElementById("grafo").remove();
      }
      var result = GramaticaAST.parse(content);
      generateTree([result.node]);
    }

    function newNode(yy, state, ...nodes) {
      const parent = getNonTerminal(yy, state);
      const children = [];
            
      for (let node of nodes) {
        node.parent = node.parent ? node.parent : parent;
        if (node.parent == parent) {
          children.push(node);
        } else if (typeof node == 'string') {
          children.push({
            name: node,
            parent,
            children: []
          });
        } else {
          children.push({
            name: node.parent,
            parent,
            children: [node]
          });
        }
      }               

      return {
        name: parent,
        parent: null,
        children
      }
    }

    function getNonTerminal(yy, state) {
      const simbolos = yy.parser.symbols_;
      const produccion = yy.parser.productions_[state];
      let nonTerminal = '';
      for (let sim in simbolos) {
        if (simbolos[sim] === produccion[0]) {
          nonTerminal = sim;
           break;
        }
      }
      return nonTerminal;
    }
  </script>