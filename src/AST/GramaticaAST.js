/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaAST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,30],$V2=[1,32],$V3=[1,33],$V4=[1,34],$V5=[1,25],$V6=[1,23],$V7=[1,26],$V8=[1,29],$V9=[1,27],$Va=[1,28],$Vb=[1,24],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[5,9,29,30,34,36,37,38,47,56,59,60,61,64,65,66,67,68,69],$Vi=[1,50],$Vj=[1,56],$Vk=[1,55],$Vl=[1,63],$Vm=[1,70],$Vn=[1,71],$Vo=[1,73],$Vp=[1,69],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[33,38,43,49],$Vw=[2,33],$Vx=[1,83],$Vy=[1,113],$Vz=[1,114],$VA=[1,119],$VB=[1,106],$VC=[1,107],$VD=[1,108],$VE=[1,109],$VF=[1,110],$VG=[1,111],$VH=[1,112],$VI=[1,115],$VJ=[1,116],$VK=[1,117],$VL=[1,118],$VM=[9,11,33,44,48,49,53,54,70,71,72,73,74,75,76,77,78,79,80,81],$VN=[1,137],$VO=[9,33,70],$VP=[5,9,29,30,34,36,37,38,47,56,58,59,60,61,64,65,66,67,68,69],$VQ=[1,164],$VR=[9,11,33,44,48,49,53,54,70,71,72,76,77,78,79,80,81],$VS=[9,11,33,44,48,49,53,54,70,71,72,73,74,76,77,78,79,80,81],$VT=[9,11,33,44,53,54,70,76,77,80,81],$VU=[9,11,33,44,48,49,53,54,70,76,77,78,79,80,81],$VV=[33,70],$VW=[1,208];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"BREAK":27,"CONTINUE":28,"tmain":29,"tPrint":30,"(":31,"LISTA_EXP":32,")":33,"treturn":34,"EXP":35,"tBreak":36,"tContinue":37,"id":38,"++":39,"--":40,"TIPO":41,"=":42,"[":43,"]":44,"tnew":45,"entero":46,"tlist":47,"<":48,">":49,".":50,"tadd":51,"TERNARIA":52,"?":53,":":54,"CASTEO":55,"tif":56,"ELSE":57,"telse":58,"tdo":59,"twhile":60,"tfor":61,"ACTUALIZACION_FOR":62,"LISTA_PARAM":63,"tvoid":64,"tinteger":65,"tboolean":66,"tstring":67,"tdouble":68,"tchar":69,",":70,"+":71,"-":72,"*":73,"/":74,"^":75,"==":76,"!=":77,"<=":78,">=":79,"&&":80,"||":81,"decimal":82,"caracter":83,"cadena":84,"ttrue":85,"tfalse":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",29:"tmain",30:"tPrint",31:"(",33:")",34:"treturn",36:"tBreak",37:"tContinue",38:"id",39:"++",40:"--",42:"=",43:"[",44:"]",45:"tnew",46:"entero",47:"tlist",48:"<",49:">",50:".",51:"tadd",53:"?",54:":",56:"tif",58:"telse",59:"tdo",60:"twhile",61:"tfor",64:"tvoid",65:"tinteger",66:"tboolean",67:"tstring",68:"tdouble",69:"tchar",70:",",71:"+",72:"-",73:"*",74:"/",75:"^",76:"==",77:"!=",78:"<=",79:">=",80:"&&",81:"||",82:"decimal",83:"caracter",84:"cadena",85:"ttrue",86:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[25,2],[24,4],[26,2],[26,3],[27,2],[28,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[15,4],[16,7],[13,7],[52,5],[55,4],[14,8],[17,5],[17,6],[57,2],[57,2],[21,7],[20,9],[20,9],[19,5],[12,6],[12,6],[12,5],[12,5],[41,1],[41,1],[41,1],[41,1],[41,1],[63,4],[63,2],[32,3],[32,1],[18,3],[18,4],[62,2],[62,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,4],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
break;
case 2: case 3:

            
break;
case 4: case 5:

                
break;
case 7: case 14: case 15: case 55: case 59: case 68: case 69: case 70: case 71: case 72: case 74: case 75: case 76: case 78: case 79: case 80: case 81: case 82: case 84: case 85: case 86: case 87: case 89: case 92:
 
break;
case 8: case 9: case 10: case 11: case 12: case 13: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 29: case 56: case 57: case 58: case 88: case 91:
  
break;
case 24:
 this.$ = $$[$0]; 
break;
case 30: case 31: case 32: case 35: case 38: case 39: case 51: case 53: case 54: case 61:

               
            
break;
case 33:

              
            
break;
case 34: case 36: case 37: case 42: case 52: case 60:

                
            
break;
case 40: case 47: case 48: case 49: case 50:

           
        
break;
case 41:

        
    
break;
case 43: case 44:

            
        
break;
case 45:

        
break;
case 46:


        
break;
case 62: case 66:

          
        
break;
case 63:
 
           
        
break;
case 64: case 65: case 90:
   
break;
case 67:

         
        
break;
case 83:
       
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:$V0,30:$V1,34:$V2,36:$V3,37:$V4,38:$V5,41:22,47:$V6,56:$V7,59:$V8,60:$V9,61:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{1:[3]},{5:[1,40],6:41,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:$V0,30:$V1,34:$V2,36:$V3,37:$V4,38:$V5,41:22,47:$V6,56:$V7,59:$V8,60:$V9,61:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($Vh,[2,3]),{11:[1,42]},o($Vh,[2,7]),o($Vh,[2,8]),{11:[1,43]},o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),{11:[1,44]},o($Vh,[2,14]),o($Vh,[2,15]),o($Vh,[2,16]),{11:[1,45]},{11:[1,46]},{11:[1,47]},{11:[1,48]},o($Vh,[2,21]),o($Vh,[2,22]),o($Vh,[2,23]),{38:[1,49],43:$Vi},{48:[1,51]},{38:[1,52]},{31:$Vj,39:[1,57],40:[1,58],42:$Vk,43:[1,54],50:[1,53]},{31:[1,59]},{31:[1,60]},{31:[1,61]},{7:62,8:$Vl},{31:[1,64]},{18:65,38:[1,66]},{11:[1,67],18:72,31:$Vm,35:68,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{11:[1,81]},{11:[1,82]},o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),o($Vv,[2,58]),o($Vv,[2,59]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,6]),o($Vh,[2,9]),o($Vh,[2,13]),o($Vh,[2,17]),o($Vh,[2,18]),o($Vh,[2,19]),o($Vh,[2,20]),{11:$Vw,31:[1,84],42:$Vx},{44:[1,85]},{41:86,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{31:[1,87]},{51:[1,88]},{43:[1,89],46:[1,90]},{18:72,31:$Vm,35:91,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,32:93,33:[1,92],35:94,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{11:[2,30]},{11:[2,31]},{18:72,31:$Vm,35:95,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:96,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{10:97,15:98,38:[1,100],41:99,47:$V6,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{60:[1,101]},{4:102,6:3,9:[1,103],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:$V0,30:$V1,34:$V2,36:$V3,37:$V4,38:$V5,41:22,47:$V6,56:$V7,59:$V8,60:$V9,61:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{18:72,31:$Vm,32:104,35:94,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{11:[2,24]},{31:$Vj},o($Vh,[2,26]),{11:[1,105],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{18:72,31:$Vm,35:120,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:121,38:$Vn,41:122,46:$Vo,52:79,55:80,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($VM,[2,83],{31:$Vj,43:[1,123]}),o($VM,[2,85]),o($VM,[2,86]),o($VM,[2,87]),o($VM,[2,88]),o($VM,[2,89]),o($VM,[2,90]),o($VM,[2,91]),o($VM,[2,92]),o($VM,[2,93]),o($Vh,[2,28]),o($Vh,[2,29]),{18:72,31:$Vm,35:124,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{33:[1,126],41:127,63:125,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{38:[1,128]},{49:[1,129]},{33:[1,131],41:127,63:130,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{31:[1,132]},{46:[1,133]},{44:[1,134]},{11:[1,135],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},o($VM,[2,64]),{33:[1,136],70:$VN},o($VO,[2,63],{48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL}),{33:[1,138],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{33:[1,139],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{11:[1,140]},{11:[1,141]},{38:[1,142],43:$Vi},{42:$Vk},{31:[1,143]},{6:41,9:[1,144],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:$V0,30:$V1,34:$V2,36:$V3,37:$V4,38:$V5,41:22,47:$V6,56:$V7,59:$V8,60:$V9,61:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($VP,[2,5]),{33:[1,145],70:$VN},o($Vh,[2,27]),{18:72,31:$Vm,35:146,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:147,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:148,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:149,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:150,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:151,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:152,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:153,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:154,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:155,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:156,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:157,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:158,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:159,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($VM,[2,73]),{33:[1,160],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{33:[1,161]},{18:72,31:$Vm,35:162,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{11:[2,32],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{33:[1,163],70:$VQ},{7:165,8:$Vl},{38:[1,166]},{42:[1,167]},{38:[1,168]},{33:[1,169],70:$VQ},{7:170,8:$Vl},{18:72,31:$Vm,35:171,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{44:[1,172]},{42:[1,173]},o([5,9,11,29,30,34,36,37,38,47,56,59,60,61,64,65,66,67,68,69],[2,37]),o($VM,[2,65]),{18:72,31:$Vm,35:174,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{7:175,8:$Vl},{7:176,8:$Vl},{18:72,31:$Vm,35:177,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{18:72,31:$Vm,35:178,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{11:$Vw,42:$Vx},{18:72,31:$Vm,35:179,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($VP,[2,4]),{11:[2,25]},o($VR,[2,68],{73:$VD,74:$VE,75:$VF}),o($VR,[2,69],{73:$VD,74:$VE,75:$VF}),o($VS,[2,70],{75:$VF}),o($VS,[2,71],{75:$VF}),o($VS,[2,72],{75:$VF}),o($VT,[2,75],{48:$Vy,49:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,78:$VI,79:$VJ}),o($VT,[2,76],{48:$Vy,49:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,78:$VI,79:$VJ}),o($VU,[2,77],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VU,[2,78],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VU,[2,79],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VU,[2,80],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o([9,11,33,44,54,70,80,81],[2,81],{48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ}),o([9,11,33,44,54,70,81],[2,82],{48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK}),{48:$Vy,49:$Vz,53:$VA,54:[1,180],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},o($VM,[2,74]),{18:72,31:$Vm,35:181,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{44:[1,182],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{7:183,8:$Vl},{41:184,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($Vh,[2,53]),o($VV,[2,61]),{8:[1,186],45:[1,185]},{42:[1,187]},{7:188,8:$Vl},o($Vh,[2,54]),{33:[1,189],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{44:[1,190]},{18:72,31:$Vm,35:191,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($VO,[2,62],{48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL}),o($Vh,[2,43],{57:192,58:[1,193]}),o($Vh,[2,50]),{11:[1,194],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{11:[1,195],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{33:[1,196],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{18:72,31:$Vm,35:197,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($VM,[2,41]),o($VM,[2,84]),o($Vh,[2,51]),{38:[1,198]},{41:199,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},{18:72,31:$Vm,32:200,35:94,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},{45:[1,201]},o($Vh,[2,52]),{11:[1,202]},{42:[1,203]},{11:[1,204],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},o($Vh,[2,44]),{7:206,8:$Vl,17:205,56:$V7},{38:$VW,62:207},{38:$VW,62:209},{11:[1,210]},o([9,11,33,44,53,54,70,80,81],[2,40],{48:$Vy,49:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ}),o($VV,[2,60]),{43:[1,211]},{9:[1,212],70:$VN},{47:[1,213]},o($Vh,[2,39]),{18:72,31:$Vm,35:214,38:$Vn,46:$Vo,52:79,55:80,72:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt,86:$Vu},o($Vh,[2,38]),o($Vh,[2,45]),o($Vh,[2,46]),{33:[1,215]},{39:[1,216],40:[1,217]},{33:[1,218]},o($Vh,[2,47]),{46:[1,219]},{11:[2,35]},{48:[1,220]},{11:[2,42],48:$Vy,49:$Vz,53:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL},{7:221,8:$Vl},{33:[2,66]},{33:[2,67]},{7:222,8:$Vl},{44:[1,223]},{41:224,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg},o($Vh,[2,48]),o($Vh,[2,49]),{11:[2,34]},{49:[1,225]},{11:[2,36]}],
defaultActions: {40:[2,1],57:[2,30],58:[2,31],65:[2,24],145:[2,25],212:[2,35],216:[2,66],217:[2,67],223:[2,34],225:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Nodo = require('./ClasesArbolAST/Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 85;     
break;
case 5:   return 86;    
break;
case 6:   return 65;  
break;
case 7:   return 66;  
break;
case 8:   return 68;   
break;
case 9:   return 67;   
break;
case 10:   return 69;   
break;
case 11:   return 56;       
break;
case 12:   return 60;    
break;
case 13:   return 61;    
break;
case 14:   return 58;     
break;
case 15:   return 64;     
break;
case 16:   return 34;   
break;
case 17:   return 45;     
break;
case 18:   return 59;     
break;
case 19:   return 47;     
break;
case 20:   return 51;     
break;
case 21:   return 'tswitch';     
break;
case 22:   return 'tcase';     
break;
case 23:   return 'tdefault';     
break;
case 24:   return 'ttoLower';     
break;
case 25:   return 'ttoUpper';     
break;
case 26:   return 29;     
break;
case 27:   return 30;    
break;
case 28:   return 37;    
break;
case 29:   return 36;    
break;
case 30:yy_.yytext = yy_.yytext.toLowerCase();          return 38;
break;
case 31:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 84;
break;
case 32:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 83
break;
case 33:return 82
break;
case 34:return 46
break;
case 35:return '$'
break;
case 36:return 50
break;
case 37:return 39;
break;
case 38:return 40;
break;
case 39:return 71;
break;
case 40:return 72;
break;
case 41:return 73;
break;
case 42:return 74;
break;
case 43:return 75;
break;
case 44:return '%';
break;
case 45:return 31;
break;
case 46:return 33;
break;
case 47:return 76;
break;
case 48:return 42;
break;
case 49:return 70;
break;
case 50:return 54;
break;
case 51:return 11;
break;
case 52:return 53;
break;
case 53:return 81;
break;
case 54:return 80;
break;
case 55:return 77;
break;
case 56:return '!';
break;
case 57:return 78;
break;
case 58:return 79;
break;
case 59:return 49;
break;
case 60:return 48;
break;
case 61:return 8;
break;
case 62:return 9;
break;
case 63:return 43;
break;
case 64:return 44;
break;
case 65: console.log(`El caracter: "${yy_.yytext}" no pertenece al lenguaje`); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaAST;
exports.Parser = GramaticaAST.Parser;
exports.parse = function () { return GramaticaAST.parse.apply(GramaticaAST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}