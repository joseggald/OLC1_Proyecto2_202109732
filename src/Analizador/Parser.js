/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,36],$V2=[1,32],$V3=[1,31],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,26],$V8=[1,24],$V9=[1,27],$Va=[1,30],$Vb=[1,28],$Vc=[1,29],$Vd=[1,25],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[5,9,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76],$Vj=[1,51],$Vk=[1,57],$Vl=[1,56],$Vm=[1,64],$Vn=[1,71],$Vo=[1,72],$Vp=[1,74],$Vq=[1,70],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[33,47,52,58],$Vx=[2,43],$Vy=[1,85],$Vz=[1,115],$VA=[1,116],$VB=[1,121],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,117],$VK=[1,118],$VL=[1,119],$VM=[1,120],$VN=[9,11,33,40,53,57,58,62,77,78,79,80,81,82,83,84,85,86,87,88],$VO=[1,140],$VP=[9,33,77],$VQ=[5,9,28,30,37,39,41,42,44,45,46,47,56,64,66,67,68,69,72,73,74,75,76],$VR=[1,169],$VS=[9,11,33,40,53,57,58,62,77,78,79,83,84,85,86,87,88],$VT=[9,11,33,40,53,57,58,62,77,78,79,80,81,83,84,85,86,87,88],$VU=[9,11,33,40,53,62,77,83,84,87,88],$VV=[9,11,33,40,53,57,58,62,77,83,84,85,86,87,88],$VW=[33,77],$VX=[1,210],$VY=[1,211],$VZ=[1,222],$V_=[9,37,39],$V$=[1,230];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"BREAK":27,"CONTINUE":28,"SWITCH":29,"tswitch":30,"(":31,"EXP":32,")":33,"BLOCK_SWITCH":34,"L_CASE":35,"CASES":36,"tcase":37,"BLOCK_CASES":38,"tdefault":39,":":40,"tmain":41,"tPrint":42,"LISTA_EXP":43,"treturn":44,"tContinue":45,"tBreak":46,"id":47,"++":48,"--":49,"TIPO":50,"=":51,"[":52,"]":53,"tnew":54,"entero":55,"tlist":56,"<":57,">":58,".":59,"tadd":60,"TERNARIA":61,"?":62,"CASTEO":63,"tif":64,"ELSE":65,"telse":66,"tdo":67,"twhile":68,"tfor":69,"ACTUALIZACION_FOR":70,"LISTA_PARAM":71,"tvoid":72,"tinteger":73,"tboolean":74,"tstring":75,"tdouble":76,",":77,"+":78,"-":79,"*":80,"/":81,"^":82,"==":83,"!=":84,"<=":85,">=":86,"&&":87,"||":88,"decimal":89,"caracter":90,"cadena":91,"ttrue":92,"tfalse":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",28:"CONTINUE",30:"tswitch",31:"(",33:")",37:"tcase",39:"tdefault",40:":",41:"tmain",42:"tPrint",44:"treturn",45:"tContinue",46:"tBreak",47:"id",48:"++",49:"--",51:"=",52:"[",53:"]",54:"tnew",55:"entero",56:"tlist",57:"<",58:">",59:".",60:"tadd",62:"?",64:"tif",66:"telse",67:"tdo",68:"twhile",69:"tfor",72:"tvoid",73:"tinteger",74:"tboolean",75:"tstring",76:"tdouble",77:",",78:"+",79:"-",80:"*",81:"/",82:"^",83:"==",84:"!=",85:"<=",86:">=",87:"&&",88:"||",89:"decimal",90:"caracter",91:"cadena",92:"ttrue",93:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[29,5],[34,3],[34,2],[35,2],[35,1],[36,3],[36,2],[38,2],[38,1],[25,2],[24,4],[26,2],[26,3],[26,2],[27,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[15,4],[16,7],[13,7],[61,5],[63,4],[14,8],[17,5],[17,6],[65,2],[65,2],[21,7],[20,9],[20,9],[19,5],[12,6],[12,6],[12,5],[12,5],[50,1],[50,1],[50,1],[50,1],[71,4],[71,2],[43,3],[43,1],[18,3],[18,4],[70,2],[70,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,4],[32,6],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 9: case 13: case 17: case 18: case 19: case 20: case 26:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 10: case 11: case 12: case 14: case 15: case 16: case 21: case 22: case 23: case 24: case 32: case 34:
 this.$ = $$[$0]; 
break;
case 25:
 this.$ = new Switch($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 27: case 33:
 this.$ = []; 
break;
case 28:
 this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 29:
 this.$=[]; this.$.push($$[$0]); 
break;
case 30:
 this.$ = new CaseSwitch($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 31:
 this.$ = new CaseSwitch(null, $$[$0], this._$.first_line, this._$.first_column);
break;
case 35:
 this.$ = new LlamadaPrint($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 36:
 this.$ = new ReturnPR(undefined,_$[$0].first_line, _$[$0].first_column); 
break;
case 37:
  this.$ = new ReturnPR($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 38:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 39:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 40:

                this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 41:

                this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 42:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 43:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 44:

                this.$ = new DeclararArreglo($$[$0-9], $$[$0-6], $$[$0-3],undefined, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
            
break;
case 45:

                this.$ = new DeclararArreglo($$[$0-7], $$[$0-4],undefined, $$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 46:

                this.$ = new DeclararLista($$[$0-8], $$[$0-6], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 47:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 48:

                this.$ = new AsignacionVector($$[$0-6], $$[$0-1], $$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 49:

                this.$ = new InsertarLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 50:

            this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 51:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 52:

                this.$ = new ModificarLista($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 53:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 54:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 55:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 56:

            this.$ = $$[$0];
        
break;
case 57:

            this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column );
        
break;
case 58: case 59:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 60:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 61:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 62:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 63:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 64:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 65:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 66:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 67:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 68:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 69:

                let decla=new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column)
                $$[$0-3].push(decla);
                this.$ = $$[$0-3];
            
break;
case 70:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 71:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 72:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 73:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);    
break;
case 74:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 75:

           this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 76:

           this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
        
break;
case 77: case 78: case 79: case 80: case 81:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 82:
 this.$ = new OperacionAritmetica($$[$0], "negativo", $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 83:
 this.$ = $$[$0-1];
break;
case 84: case 85: case 86: case 87: case 88: case 89:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 90: case 91:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 92:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 93:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);        
break;
case 94:
 this.$ = new AccesoLista($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 95: case 102: case 103:
 this.$ = $$[$0];
break;
case 96:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 97:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 99:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 101:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:$V0,29:22,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:23,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{1:[3]},{5:[1,41],6:42,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:$V0,29:22,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:23,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh},o($Vi,[2,3]),{11:[1,43]},o($Vi,[2,7]),o($Vi,[2,8]),{11:[1,44]},o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{11:[1,45]},o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),{11:[1,46]},{11:[1,47]},{11:[1,48]},{11:[1,49]},o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),{47:[1,50],52:$Vj},{57:[1,52]},{47:[1,53]},{31:$Vk,48:[1,58],49:[1,59],51:$Vl,52:[1,55],59:[1,54]},{31:[1,60]},{31:[1,61]},{31:[1,62]},{7:63,8:$Vm},{31:[1,65]},{18:66,47:[1,67]},{11:[1,68],18:73,31:$Vn,32:69,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{11:[1,82]},{11:[1,83]},{31:[1,84]},o($Vw,[2,65]),o($Vw,[2,66]),o($Vw,[2,67]),o($Vw,[2,68]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,6]),o($Vi,[2,9]),o($Vi,[2,13]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),{11:$Vx,31:[1,86],51:$Vy},{53:[1,87]},{50:88,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{31:[1,89]},{60:[1,90]},{52:[1,91],55:[1,92]},{18:73,31:$Vn,32:93,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:96,33:[1,94],43:95,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{11:[2,40]},{11:[2,41]},{18:73,31:$Vn,32:97,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:98,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{10:99,15:100,47:[1,102],50:101,56:$V8,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{68:[1,103]},{4:104,6:3,9:[1,105],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:$V0,29:22,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:23,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{18:73,31:$Vn,32:96,43:106,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{11:[2,34]},{31:$Vk},o($Vi,[2,36]),{11:[1,107],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{18:73,31:$Vn,32:122,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:123,47:$Vo,50:124,55:$Vp,61:80,63:81,73:$Ve,74:$Vf,75:$Vg,76:$Vh,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VN,[2,92],{31:$Vk,52:[1,125]}),o($VN,[2,95]),o($VN,[2,96]),o($VN,[2,97]),o($VN,[2,98]),o($VN,[2,99]),o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($Vi,[2,38]),o($Vi,[2,39]),{18:73,31:$Vn,32:126,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:127,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{33:[1,129],50:130,71:128,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{47:[1,131]},{58:[1,132]},{33:[1,134],50:130,71:133,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{31:[1,135]},{55:[1,136]},{53:[1,137]},{11:[1,138],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($VN,[2,73]),{33:[1,139],77:$VO},o($VP,[2,72],{57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),{33:[1,141],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{33:[1,142],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{11:[1,143]},{11:[1,144]},{47:[1,145],52:$Vj},{51:$Vl},{31:[1,146]},{6:42,9:[1,147],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:$V0,29:22,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:23,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh},o($VQ,[2,5]),{33:[1,148],77:$VO},o($Vi,[2,37]),{18:73,31:$Vn,32:149,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:150,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:151,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:152,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:153,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:154,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:155,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:156,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:157,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:158,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:159,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:160,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:161,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:162,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VN,[2,82]),{33:[1,163],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{33:[1,164]},{18:73,31:$Vn,32:165,47:$Vo,52:[1,166],55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{33:[1,167],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{11:[2,42],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{33:[1,168],77:$VR},{7:170,8:$Vm},{47:[1,171]},{51:[1,172]},{47:[1,173]},{33:[1,174],77:$VR},{7:175,8:$Vm},{18:73,31:$Vn,32:176,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{53:[1,177]},{51:[1,178]},o([5,9,11,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76],[2,47]),o($VN,[2,74]),{18:73,31:$Vn,32:179,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{7:180,8:$Vm},{7:181,8:$Vm},{18:73,31:$Vn,32:182,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{18:73,31:$Vn,32:183,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{11:$Vx,51:$Vy},{18:73,31:$Vn,32:184,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VQ,[2,4]),{11:[2,35]},o($VS,[2,77],{80:$VE,81:$VF,82:$VG}),o($VS,[2,78],{80:$VE,81:$VF,82:$VG}),o($VT,[2,79],{82:$VG}),o($VT,[2,80],{82:$VG}),o($VT,[2,81],{82:$VG}),o($VU,[2,84],{57:$Vz,58:$VA,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,85:$VJ,86:$VK}),o($VU,[2,85],{57:$Vz,58:$VA,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,85:$VJ,86:$VK}),o($VV,[2,86],{78:$VC,79:$VD,80:$VE,81:$VF,82:$VG}),o($VV,[2,87],{78:$VC,79:$VD,80:$VE,81:$VF,82:$VG}),o($VV,[2,88],{78:$VC,79:$VD,80:$VE,81:$VF,82:$VG}),o($VV,[2,89],{78:$VC,79:$VD,80:$VE,81:$VF,82:$VG}),o([9,11,33,40,53,77,87,88],[2,90],{57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o([9,11,33,40,53,77,88],[2,91],{57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL}),{40:[1,185],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($VN,[2,83]),{18:73,31:$Vn,32:186,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{53:[1,187],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{18:73,31:$Vn,32:188,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{8:[1,190],34:189},{7:191,8:$Vm},{50:192,73:$Ve,74:$Vf,75:$Vg,76:$Vh},o($Vi,[2,63]),o($VW,[2,70]),{8:[1,194],54:[1,193]},{51:[1,195]},{7:196,8:$Vm},o($Vi,[2,64]),{33:[1,197],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{53:[1,198]},{18:73,31:$Vn,32:199,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VP,[2,71],{57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($Vi,[2,53],{65:200,66:[1,201]}),o($Vi,[2,60]),{11:[1,202],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{11:[1,203],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{33:[1,204],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{18:73,31:$Vn,32:205,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($VN,[2,51]),o($VN,[2,93]),{53:[1,206],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($Vi,[2,25]),{9:[1,208],35:207,36:209,37:$VX,39:$VY},o($Vi,[2,61]),{47:[1,212]},{50:213,73:$Ve,74:$Vf,75:$Vg,76:$Vh},{18:73,31:$Vn,32:96,43:214,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{54:[1,215]},o($Vi,[2,62]),{11:[1,216]},{51:[1,217]},{11:[1,218],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($Vi,[2,54]),{7:220,8:$Vm,17:219,64:$V9},{47:$VZ,70:221},{47:$VZ,70:223},{11:[1,224]},o([9,11,33,40,53,62,77,87,88],[2,50],{57:$Vz,58:$VA,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),{53:[1,225]},{9:[1,226],36:227,37:$VX,39:$VY},o($Vi,[2,27]),o($V_,[2,29]),{18:73,31:$Vn,32:228,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},{38:229,40:$V$},o($VW,[2,69]),{52:[1,231]},{9:[1,232],77:$VO},{56:[1,233]},o($Vi,[2,49]),{18:73,31:$Vn,32:234,47:$Vo,55:$Vp,61:80,63:81,79:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv},o($Vi,[2,48]),o($Vi,[2,55]),o($Vi,[2,56]),{33:[1,235]},{48:[1,236],49:[1,237]},{33:[1,238]},o($Vi,[2,57]),o($VN,[2,94]),o($Vi,[2,26]),o($V_,[2,28]),{38:239,40:$V$,57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},o($V_,[2,31]),o($V_,[2,33],{6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,29:22,50:23,4:240,28:$V0,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh}),{55:[1,241]},{11:[2,45]},{57:[1,242]},{11:[2,52],57:$Vz,58:$VA,62:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM},{7:243,8:$Vm},{33:[2,75]},{33:[2,76]},{7:244,8:$Vm},o($V_,[2,30]),o($V_,[2,32],{10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,29:22,50:23,6:42,28:$V0,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh}),{53:[1,245]},{50:246,73:$Ve,74:$Vf,75:$Vg,76:$Vh},o($Vi,[2,58]),o($Vi,[2,59]),{11:[2,44]},{58:[1,247]},{11:[2,46]}],
defaultActions: {41:[2,1],58:[2,40],59:[2,41],66:[2,34],148:[2,35],232:[2,45],236:[2,75],237:[2,76],245:[2,44],247:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let DeclararArreglo             =   require("../Instrucciones/DeclararArreglo").DeclararArreglo;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let AsignacionVector            =   require("../Instrucciones/AsignacionVector").AsignacionVector;
    let Ternario                    =   require("../Expresiones/Ternario").Ternario;
    let If                          =   require("../Instrucciones/If").If;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let AccesoLista                 =   require("../Expresiones/AccesoLista").AccesoLista;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let LlamadaPrint                =   require("../Expresiones/LlamadaPrint").LlamadaPrint;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let ReturnPR                    =   require("../Expresiones/ReturnPR").ReturnPR;
    let Break                       =   require("../Expresiones/Break").Break;
    let Continue                    =   require("../Expresiones/Continue").Continue;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let Incremento                  =   require("../Instrucciones/Incremento").Incremento;
    let Decremento                  =    require("../Instrucciones/Decremento").Decremento;
    let Switch                      =   require("../Instrucciones/Switch").Switch;
    let CaseSwitch                  =    require("../Instrucciones/CaseSwitch").CaseSwitch;
    let For                         =    require("../Instrucciones/For").For;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Casteo                      =    require("../Expresiones/Casteo").Casteo;
    let InsertarLista               =    require("../Instrucciones/InsertarLista").InsertarLista;
    let ModificarLista              =    require("../Instrucciones/ModificarLista").ModificarLista;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 92;     
break;
case 5:   return 93;    
break;
case 6:   return 73;  
break;
case 7:   return 74;  
break;
case 8:   return 76;   
break;
case 9:   return 75;   
break;
case 10:   return 'tchar';   
break;
case 11:   return 64;       
break;
case 12:   return 68;    
break;
case 13:   return 69;    
break;
case 14:   return 66;     
break;
case 15:   return 72;     
break;
case 16:   return 44;   
break;
case 17:   return 54;     
break;
case 18:   return 67;     
break;
case 19:   return 56;     
break;
case 20:   return 60;     
break;
case 21:   return 30;     
break;
case 22:   return 37;     
break;
case 23:   return 39;     
break;
case 24:   return 'ttoLower';     
break;
case 25:   return 'ttoUpper';     
break;
case 26:   return 41;     
break;
case 27:   return 42;    
break;
case 28:   return 46;    
break;
case 29:   return 45;    
break;
case 30:yy_.yytext = yy_.yytext.toLowerCase();          return 47;
break;
case 31:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 91;
break;
case 32:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 90
break;
case 33:return 89
break;
case 34:return 55
break;
case 35:return '$'
break;
case 36:return 59
break;
case 37:return 48;
break;
case 38:return 49;
break;
case 39:return 78;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 81;
break;
case 43:return 82;
break;
case 44:return '%';
break;
case 45:return 31;
break;
case 46:return 33;
break;
case 47:return 83;
break;
case 48:return 51;
break;
case 49:return 77;
break;
case 50:return 40;
break;
case 51:return 11;
break;
case 52:return 62;
break;
case 53:return 88;
break;
case 54:return 87;
break;
case 55:return 84;
break;
case 56:return '!';
break;
case 57:return 85;
break;
case 58:return 86;
break;
case 59:return 58;
break;
case 60:return 57;
break;
case 61:return 8;
break;
case 62:return 9;
break;
case 63:return 52;
break;
case 64:return 53;
break;
case 65: console.log(`El caracter: "${yy_.yytext}" no pertenece al lenguaje`); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}