/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,37],$V2=[1,33],$V3=[1,32],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,27],$V8=[1,25],$V9=[1,28],$Va=[1,31],$Vb=[1,29],$Vc=[1,30],$Vd=[1,26],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[5,9,30,37,39,41,42,44,45,46,47,55,63,66,67,68,71,72,73,74,75,76],$Vk=[1,53],$Vl=[1,59],$Vm=[1,58],$Vn=[1,68],$Vo=[1,67],$Vp=[1,82],$Vq=[1,75],$Vr=[1,76],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[1,74],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[33,47,52,57],$VI=[2,11],$VJ=[2,45],$VK=[1,100],$VL=[1,135],$VM=[1,136],$VN=[1,141],$VO=[1,127],$VP=[1,128],$VQ=[1,129],$VR=[1,130],$VS=[1,131],$VT=[1,132],$VU=[1,133],$VV=[1,134],$VW=[1,137],$VX=[1,138],$VY=[1,139],$VZ=[1,140],$V_=[2,9,11,33,40,53,56,57,61,77,87,88,89,90,91,92,93,94,95,96,97,98],$V$=[1,168],$V01=[9,33,77],$V11=[2,5,9,30,37,39,41,42,44,45,46,47,55,63,65,66,67,68,71,72,73,74,75,76],$V21=[1,212],$V31=[2,9,11,33,40,53,56,57,61,77,87,88,93,94,95,96,97,98],$V41=[2,9,11,33,40,53,56,57,61,77,87,88,89,90,92,93,94,95,96,97,98],$V51=[2,9,11,33,40,53,61,77,93,94,97,98],$V61=[2,9,11,33,40,53,56,57,61,77,93,94,95,96,97,98],$V71=[33,77],$V81=[1,273],$V91=[1,274],$Va1=[1,287],$Vb1=[9,37,39],$Vc1=[1,301],$Vd1=[2,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_AGREGAR":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ASIGNAR":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"BREAK":27,"CONTINUE":28,"SWITCH":29,"tswitch":30,"(":31,"EXP":32,")":33,"BLOCK_SWITCH":34,"CONT_CASE":35,"CASES":36,"tcase":37,"BLOCK_CASES":38,"tdefault":39,":":40,"tmain":41,"tPrint":42,"LISTA_EXP":43,"treturn":44,"tBreak":45,"tContinue":46,"id":47,"++":48,"--":49,"TIPO":50,"=":51,"[":52,"]":53,"tnew":54,"tlist":55,"<":56,">":57,".":58,"tadd":59,"TERNARIA":60,"?":61,"CASTEO":62,"tif":63,"ELSE":64,"telse":65,"tdo":66,"twhile":67,"tfor":68,"ACTUALIZACION_FOR":69,"LISTA_PARAM":70,"tvoid":71,"tinteger":72,"tboolean":73,"tstring":74,"tdouble":75,"tchar":76,",":77,"FUNCION_LENGUAJE":78,"ttoLower":79,"ttoUpper":80,"ttruncate":81,"tround":82,"ttoCharArray":83,"ttoString":84,"ttypeOf":85,"tlength":86,"+":87,"-":88,"*":89,"/":90,"^":91,"%":92,"==":93,"!=":94,"<=":95,">=":96,"&&":97,"||":98,"PRIMITIVO":99,"entero":100,"decimal":101,"caracter":102,"cadena":103,"ttrue":104,"tfalse":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",30:"tswitch",31:"(",33:")",37:"tcase",39:"tdefault",40:":",41:"tmain",42:"tPrint",44:"treturn",45:"tBreak",46:"tContinue",47:"id",48:"++",49:"--",51:"=",52:"[",53:"]",54:"tnew",55:"tlist",56:"<",57:">",58:".",59:"tadd",61:"?",63:"tif",65:"telse",66:"tdo",67:"twhile",68:"tfor",71:"tvoid",72:"tinteger",73:"tboolean",74:"tstring",75:"tdouble",76:"tchar",77:",",79:"ttoLower",80:"ttoUpper",81:"ttruncate",82:"tround",83:"ttoCharArray",84:"ttoString",85:"ttypeOf",86:"tlength",87:"+",88:"-",89:"*",90:"/",91:"^",92:"%",93:"==",94:"!=",95:"<=",96:">=",97:"&&",98:"||",100:"entero",101:"decimal",102:"caracter",103:"cadena",104:"ttrue",105:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[7,2],[7,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[29,5],[34,3],[34,2],[35,2],[35,1],[36,3],[36,2],[38,2],[38,1],[25,2],[24,4],[26,2],[26,3],[27,2],[28,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[10,7],[15,4],[16,7],[13,7],[60,5],[62,4],[14,8],[17,5],[17,6],[64,2],[64,2],[21,7],[21,7],[21,7],[21,7],[20,9],[20,9],[20,9],[20,9],[20,9],[20,9],[20,9],[19,5],[19,5],[19,5],[12,6],[12,6],[12,5],[12,5],[50,1],[50,1],[50,1],[50,1],[50,1],[70,4],[70,2],[43,3],[43,1],[18,3],[18,4],[69,2],[69,2],[69,3],[78,4],[78,4],[78,4],[78,4],[78,4],[78,4],[78,4],[78,4],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,4],[32,6],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:
   TablaError.insertarError(new Error("Sintactico", `El error parte tras: "${yytext}" no acorde a la gramatica.`,this._$.first_line, this._$.first_column));
break;
case 5:

                       this.$ = $$[$0-1];
                
break;
case 6:

                        this.$ = [];
                
break;
case 7:
   TablaError.insertarError(new Error("Sintactico", "Falta en el bloque de sentencias {",this._$.first_line, this._$.first_column));
break;
case 8: case 11: case 15: case 19: case 20: case 21: case 22: case 28:
 this.$ = $$[$0-1]; 
break;
case 9: case 10: case 12: case 13: case 14: case 16: case 17: case 18: case 23: case 24: case 25: case 26: case 34: case 36:
 this.$ = $$[$0]; 
break;
case 27:
 this.$ = new Switch($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 29: case 35:
 this.$ = []; 
break;
case 30:
 this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 31:
 this.$=[]; this.$.push($$[$0]); 
break;
case 32:
 this.$ = new CaseSwitch($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 33:
 this.$ = new CaseSwitch(null, $$[$0], this._$.first_line, this._$.first_column);
break;
case 37:
 this.$ = new LlamadaPrint($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 38:
 this.$ = new ReturnPR(undefined,_$[$0].first_line, _$[$0].first_column); 
break;
case 39:
  this.$ = new ReturnPR($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 41:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 42:

                this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 43:

                this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 44:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 45:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 46:

                this.$ = new DeclararArreglo($$[$0-9], $$[$0-6], $$[$0-3],undefined, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
            
break;
case 47:

                this.$ = new DeclararArreglo($$[$0-7], $$[$0-4],undefined, $$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 48:

                this.$ = new DeclararLista($$[$0-8], $$[$0-6], $$[$0-1],undefined, _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 49:

                this.$ = new DeclararLista($$[$0-4], $$[$0-2], undefined, $$[$0],  _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 50:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 51:

                this.$ = new AsignacionVector($$[$0-6], $$[$0-1], $$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 52:

                this.$ = new InsertarLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 53:

            this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 54:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 55:

                this.$ = new ModificarLista($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 56:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 57:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 58:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 59:

            this.$ = $$[$0];
        
break;
case 60:

            this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column );
        
break;
case 61: case 62: case 63: case 72:
   TablaError.insertarError(new Error("Sintactico", "El error en while falta '(' ",this._$.first_line, this._$.first_column));     
break;
case 64: case 65:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 66:
   TablaError.insertarError(new Error("Sintactico", "El error en For falta declaracion o asignacion de una variable.",this._$.first_line, this._$.first_column));    
break;
case 67: case 68: case 70:
   TablaError.insertarError(new Error("Sintactico", "El error en For falta ';' ",this._$.first_line, this._$.first_column));     
break;
case 69:
   TablaError.insertarError(new Error("Sintactico", "El error en For falta el iterador ++/--/=+n ",this._$.first_line, this._$.first_column));    
break;
case 71:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 73:
   TablaError.insertarError(new Error("Sintactico", "El error en while falta ')' ",this._$.first_line, this._$.first_column));     
break;
case 74:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 75:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 76:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 77:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 78:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 79:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 80:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 81:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 82:
 this.$ = new Tipo(TipoPrimitivo.Char);  
break;
case 83:

                let decla=new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column)
                $$[$0-3].push(decla);
                this.$ = $$[$0-3];
            
break;
case 84:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 85:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 86:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 87:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);    
break;
case 88:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 89:

           this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 90:

           this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
        
break;
case 91:

           this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
        
break;
case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99:
this.$ = new FuncionLenguaje($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 100: case 101: case 102: case 103: case 104: case 107:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
 this.$ = new OperacionAritmetica($$[$0], "negativo", $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 106:
 this.$ = $$[$0-1];
break;
case 108: case 109: case 110: case 111: case 112: case 113:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 114: case 115:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 116:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 117:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);        
break;
case 118:
 this.$ = new AccesoLista($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 119: case 120: case 121: case 122: case 123:
 this.$ = $$[$0];
break;
case 124:
   TablaError.insertarError(new Error("Sintactico", `Error a nivel expresion despues de: "${yytext}" no cumplio o no entra dentro de la gramatica expresion`,this._$.first_line, this._$.first_column));     
break;
case 125:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 126:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 127:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 128:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 129:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 130:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{1:[3]},{5:[1,43],6:44,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),{11:[1,45]},o($Vj,[2,9]),o($Vj,[2,10]),{11:[1,46]},o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),{11:[1,47]},o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),{11:[1,48]},{11:[1,49]},{11:[1,50]},{11:[1,51]},o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),o($Vj,[2,26]),{47:[1,52],52:$Vk},{56:[1,54]},{47:[1,55]},{31:$Vl,48:[1,60],49:[1,61],51:$Vm,52:[1,57],58:[1,56]},{31:[1,62]},{2:[1,64],31:[1,63]},{31:[1,65]},{2:$Vn,7:66,8:$Vo},{31:[1,69]},{18:70,47:[1,71]},{2:$Vp,11:[1,72],18:77,31:$Vq,32:73,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{11:[1,97]},{11:[1,98]},{31:[1,99]},o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,8]),o($Vj,$VI),o($Vj,[2,15]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{11:$VJ,31:[1,101],51:$VK},{53:[1,102]},{50:103,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{31:[1,104]},{59:[1,105]},{2:$Vp,18:77,31:$Vq,32:107,47:$Vr,52:[1,106],60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:108,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:111,33:[1,109],43:110,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{11:[2,42]},{11:[2,43]},{2:$Vp,18:77,31:$Vq,32:112,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:113,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:114,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:[1,117],10:115,15:116,47:[1,119],50:118,55:$V8,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{2:[1,121],67:[1,120]},{2:$V0,4:122,6:3,9:[1,123],10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{9:[1,124]},{2:$Vp,18:77,31:$Vq,32:111,43:125,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{11:[2,36]},{31:$Vl},o($Vj,[2,38]),{11:[1,126],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:$Vp,18:77,31:$Vq,32:142,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:143,47:$Vr,50:144,60:78,62:79,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V_,[2,116],{31:$Vl,52:[1,145]}),o($V_,[2,119]),o($V_,[2,120]),o($V_,[2,121]),o($V_,[2,122]),o($V_,[2,123]),o($V_,[2,124]),{31:[1,146]},{31:[1,147]},{31:[1,148]},{31:[1,149]},{31:[1,150]},{31:[1,151]},{31:[1,152]},{31:[1,153]},o($V_,[2,125]),o($V_,[2,126]),o($V_,[2,127]),o($V_,[2,128]),o($V_,[2,129]),o($V_,[2,130]),o($Vj,[2,40]),o($Vj,[2,41]),{2:$Vp,18:77,31:$Vq,32:154,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:155,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{33:[1,157],50:158,70:156,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{47:[1,159]},{57:[1,160]},{33:[1,162],50:158,70:161,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{31:[1,163]},{2:$Vp,18:77,31:$Vq,32:164,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{53:[1,165],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{11:[1,166],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($V_,[2,87]),{33:[1,167],77:$V$},o($V01,[2,86],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),{33:[1,169],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:[1,171],33:[1,170],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,172],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:[1,174],11:[1,173]},{11:[1,175]},{11:[1,176]},{47:[1,177],52:$Vk},{51:$Vm},{2:[1,179],31:[1,178]},{31:[1,180]},{6:44,9:[1,181],10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},o($V11,[2,6]),o($V11,[2,7]),{33:[1,182],77:$V$},o($Vj,[2,39]),{2:$Vp,18:77,31:$Vq,32:183,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:184,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:185,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:186,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:187,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:188,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:189,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:190,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:191,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:192,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:193,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:194,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:195,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:196,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:197,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V_,[2,105]),{33:[1,198],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,199]},{2:$Vp,18:77,31:$Vq,32:200,47:$Vr,52:[1,201],60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:202,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:203,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:204,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:205,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:206,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:207,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:208,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:209,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{33:[1,210],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($VI,[2,44],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),{33:[1,211],77:$V21},{2:$Vn,7:213,8:$Vo},{47:[1,214]},{51:[1,215]},{47:[1,216]},{33:[1,217],77:$V21},{2:$Vn,7:218,8:$Vo},{2:$Vp,18:77,31:$Vq,32:219,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{53:[1,220],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{51:[1,221]},o([5,9,11,30,37,39,41,42,44,45,46,47,55,63,66,67,68,71,72,73,74,75,76],[2,50]),o($V_,[2,88]),{2:$Vp,18:77,31:$Vq,32:222,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vn,7:223,8:$Vo},{2:$Vn,7:224,8:$Vo},{2:$Vn,7:225,8:$Vo},{2:$Vn,7:226,8:$Vo},{2:$Vp,18:77,31:$Vq,32:227,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:228,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:229,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:230,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($VI,$VJ,{51:$VK}),{2:$Vp,18:77,31:$Vq,32:231,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:232,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:233,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V11,[2,5]),{11:[2,37]},o($V31,[2,100],{89:$VQ,90:$VR,91:$VS,92:$VT}),o($V31,[2,101],{89:$VQ,90:$VR,91:$VS,92:$VT}),o($V41,[2,102],{91:$VS}),o($V41,[2,103],{91:$VS}),o($V41,[2,104],{91:$VS}),o($V41,[2,107],{91:$VS}),o($V51,[2,108],{56:$VL,57:$VM,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,95:$VW,96:$VX}),o($V51,[2,109],{56:$VL,57:$VM,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,95:$VW,96:$VX}),o($V61,[2,110],{87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),o($V61,[2,111],{87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),o($V61,[2,112],{87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),o($V61,[2,113],{87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),o([2,9,11,33,40,53,77,97,98],[2,114],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX}),o([2,9,11,33,40,53,77,98],[2,115],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY}),{40:[1,234],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($V_,[2,106]),{2:$Vp,18:77,31:$Vq,32:235,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{53:[1,236],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:$Vp,18:77,31:$Vq,32:237,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{33:[1,238],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,239],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,240],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,241],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,242],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,243],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,244],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,245],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{8:[1,247],34:246},{2:$Vn,7:248,8:$Vo},{50:249,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},o($Vj,[2,76]),o($V71,[2,84]),{8:[1,251],54:[1,250]},{51:[1,252]},{2:$Vn,7:253,8:$Vo},o($Vj,[2,77]),{33:[1,254],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{53:[1,255]},{2:$Vp,18:77,31:$Vq,32:256,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V01,[2,85],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vj,[2,56],{64:257,65:[1,258]}),o($Vj,[2,71]),o($Vj,[2,73]),o($Vj,[2,72]),{2:[1,260],11:[1,259],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{11:[1,261],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{11:[1,262],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{11:[1,263],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:[1,265],33:[1,264],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,266],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{33:[1,267],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:$Vp,18:77,31:$Vq,32:268,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($V_,[2,54]),o($V_,[2,117]),{53:[1,269],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($V_,[2,92]),o($V_,[2,93]),o($V_,[2,94]),o($V_,[2,95]),o($V_,[2,96]),o($V_,[2,97]),o($V_,[2,98]),o($V_,[2,99]),o($Vj,[2,27]),{9:[1,271],35:270,36:272,37:$V81,39:$V91},o($Vj,[2,74]),{47:[1,275]},{50:276,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},{2:$Vp,18:77,31:$Vq,32:111,43:277,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vp,18:77,31:$Vq,32:279,47:$Vr,54:[1,278],60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($Vj,[2,75]),{11:[1,280]},{51:[1,281]},{11:[1,282],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($Vj,[2,57]),{2:$Vn,7:284,8:$Vo,17:283,63:$V9},{2:[1,286],47:$Va1,69:285},{47:$Va1,69:288},{47:$Va1,69:289},{47:$Va1,69:290},{47:$Va1,69:291},{11:[1,292]},{2:$Vn,7:293,8:$Vo},{2:$Vn,7:294,8:$Vo},{2:$Vn,7:295,8:$Vo},o([2,9,11,33,40,53,61,77,97,98],[2,53],{56:$VL,57:$VM,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX}),{53:[1,296]},{9:[1,297],36:298,37:$V81,39:$V91},o($Vj,[2,29]),o($Vb1,[2,31]),{2:$Vp,18:77,31:$Vq,32:299,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{38:300,40:$Vc1},o($V71,[2,83]),{52:[1,302]},{9:[1,303],77:$V$},{55:[1,304]},o($VI,[2,49],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vj,[2,52]),{2:$Vp,18:77,31:$Vq,32:305,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($Vj,[2,51]),o($Vj,[2,58]),o($Vj,[2,59]),{2:[1,307],33:[1,306]},{33:[1,308]},{48:[1,309],49:[1,310],51:[1,311]},{33:[1,312]},{33:[1,313]},{33:[1,314]},{33:[1,315]},o($Vj,[2,60]),o($Vj,[2,62]),o($Vj,[2,61]),o($Vj,[2,63]),o($V_,[2,118]),o($Vj,[2,28]),o($Vb1,[2,30]),{38:316,40:$Vc1,56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},o($Vb1,$Vd1),o($Vb1,[2,35],{6:3,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,50:24,4:317,2:$V0,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi}),{2:$Vp,18:77,31:$Vq,32:318,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},o($VI,[2,47]),{56:[1,319]},{11:[2,55],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{2:$Vn,7:320,8:$Vo},{2:$Vn,7:321,8:$Vo},{2:$Vn,7:322,8:$Vo},o($Vd1,[2,89]),o($Vd1,[2,90]),{2:$Vp,18:77,31:$Vq,32:323,47:$Vr,60:78,62:79,78:80,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,88:$VA,99:81,100:$VB,101:$VC,102:$VD,103:$VE,104:$VF,105:$VG},{2:$Vn,7:324,8:$Vo},{2:$Vn,7:325,8:$Vo},{2:$Vn,7:326,8:$Vo},{2:$Vn,7:327,8:$Vo},o($Vb1,[2,32]),o($Vb1,[2,34],{10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:22,29:23,50:24,6:44,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,55:$V8,63:$V9,66:$Va,67:$Vb,68:$Vc,71:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi}),{53:[1,328],56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ},{50:329,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi},o($Vj,[2,64]),o($Vj,[2,70]),o($Vj,[2,69]),o($Vd1,[2,91],{56:$VL,57:$VM,61:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vj,[2,68]),o($Vj,[2,67]),o($Vj,[2,65]),o($Vj,[2,66]),o($VI,[2,46]),{57:[1,330]},o($VI,[2,48])],
defaultActions: {43:[2,1],60:[2,42],61:[2,43],70:[2,36],182:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let DeclararArreglo             =   require("../Instrucciones/DeclararArreglo").DeclararArreglo;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let AsignacionVector            =   require("../Instrucciones/AsignacionVector").AsignacionVector;
    let Ternario                    =   require("../Expresiones/Ternario").Ternario;
    let If                          =   require("../Instrucciones/If").If;
    let FuncionLenguaje             =   require("../Expresiones/FuncionLenguaje").FuncionLenguaje;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let AccesoLista                 =   require("../Expresiones/AccesoLista").AccesoLista;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let LlamadaPrint                =   require("../Expresiones/LlamadaPrint").LlamadaPrint;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let ReturnPR                    =   require("../Expresiones/ReturnPR").ReturnPR;
    let Break                       =   require("../Expresiones/Break").Break;
    let Continue                    =   require("../Expresiones/Continue").Continue;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let Incremento                  =   require("../Instrucciones/Incremento").Incremento;
    let Decremento                  =    require("../Instrucciones/Decremento").Decremento;
    let Switch                      =   require("../Instrucciones/Switch").Switch;
    let CaseSwitch                  =    require("../Instrucciones/CaseSwitch").CaseSwitch;
    let For                         =    require("../Instrucciones/For").For;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Casteo                      =    require("../Expresiones/Casteo").Casteo;
    let InsertarLista               =    require("../Instrucciones/InsertarLista").InsertarLista;
    let ModificarLista              =    require("../Instrucciones/ModificarLista").ModificarLista;
    let Error                       =    require("../Tabla/Error").Error;
    let TablaError                  =    require("../Tabla/TablaError").TablaError;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 104;     
break;
case 5:   return 105;    
break;
case 6:   return 72;  
break;
case 7:   return 73;  
break;
case 8:   return 75;   
break;
case 9:   return 74;   
break;
case 10:   return 76;   
break;
case 11:   return 63;       
break;
case 12:   return 67;    
break;
case 13:   return 68;    
break;
case 14:   return 65;     
break;
case 15:   return 71;     
break;
case 16:   return 44;   
break;
case 17:   return 54;     
break;
case 18:   return 66;     
break;
case 19:   return 55;     
break;
case 20:   return 59;     
break;
case 21:   return 30;     
break;
case 22:   return 37;     
break;
case 23:   return 39;     
break;
case 24:   return 79;     
break;
case 25:   return 80;     
break;
case 26:   return 81;     
break;
case 27:   return 82;     
break;
case 28:   return 86;     
break;
case 29:   return 85;     
break;
case 30:   return 84;     
break;
case 31:   return 83;     
break;
case 32:   return 41;     
break;
case 33:   return 42;    
break;
case 34:   return 45;    
break;
case 35:   return 46;    
break;
case 36:yy_.yytext = yy_.yytext.toLowerCase();          return 47;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 103;
break;
case 38:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 102
break;
case 39:return 101
break;
case 40:return 100
break;
case 41:return 58
break;
case 42:return 48;
break;
case 43:return 49;
break;
case 44:return 87;
break;
case 45:return 88;
break;
case 46:return 89;
break;
case 47:return 90;
break;
case 48:return 91;
break;
case 49:return 92;
break;
case 50:return 31;
break;
case 51:return 33;
break;
case 52:return 93;
break;
case 53:return 51;
break;
case 54:return 77;
break;
case 55:return 40;
break;
case 56:return 11;
break;
case 57:return 61;
break;
case 58:return 98;
break;
case 59:return 97;
break;
case 60:return 94;
break;
case 61:return '!';
break;
case 62:return 95;
break;
case 63:return 96;
break;
case 64:return 57;
break;
case 65:return 56;
break;
case 66:return 8;
break;
case 67:return 9;
break;
case 68:return 52;
break;
case 69:return 53;
break;
case 70:  TablaError.insertarError(new Error("Lexico", `El caracter: "${yy_.yytext}" no pertenece dentro del lenguaje`, yy_.yylloc.first_line,yy_.yylloc.first_column)); 
    console.log("Lexico"+yy_.yytext+" "+ yy_.yylloc.first_line+" "+yy_.yylloc.first_column) 
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:length\b)/,/^(?:typeOf\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}