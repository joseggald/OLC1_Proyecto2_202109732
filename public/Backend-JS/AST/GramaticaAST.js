/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaAST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,37],$V2=[1,33],$V3=[1,32],$V4=[1,34],$V5=[1,35],$V6=[1,36],$V7=[1,27],$V8=[1,25],$V9=[1,28],$Va=[1,31],$Vb=[1,29],$Vc=[1,30],$Vd=[1,26],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[5,9,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76,77],$Vk=[1,51],$Vl=[1,57],$Vm=[1,56],$Vn=[1,64],$Vo=[1,71],$Vp=[1,72],$Vq=[1,77],$Vr=[1,70],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[33,47,52,58],$Vy=[2,44],$Vz=[1,86],$VA=[1,117],$VB=[1,118],$VC=[1,123],$VD=[1,110],$VE=[1,111],$VF=[1,112],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[1,116],$VK=[1,119],$VL=[1,120],$VM=[1,121],$VN=[1,122],$VO=[9,11,33,40,53,57,58,62,78,88,89,90,91,92,93,94,95,96,97,98],$VP=[1,142],$VQ=[9,33,78],$VR=[5,9,28,30,37,39,41,42,44,45,46,47,56,64,66,67,68,69,72,73,74,75,76,77],$VS=[1,171],$VT=[9,11,33,40,53,57,58,62,78,88,89,93,94,95,96,97,98],$VU=[9,11,33,40,53,57,58,62,78,88,89,90,91,93,94,95,96,97,98],$VV=[9,11,33,40,53,62,78,93,94,97,98],$VW=[9,11,33,40,53,57,58,62,78,93,94,95,96,97,98],$VX=[33,78],$VY=[1,213],$VZ=[1,214],$V_=[1,225],$V$=[9,37,39],$V01=[1,233];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"BREAK":27,"CONTINUE":28,"SWITCH":29,"tswitch":30,"(":31,"EXP":32,")":33,"BLOCK_SWITCH":34,"CONT_CASE":35,"CASES":36,"tcase":37,"BLOCK_CASES":38,"tdefault":39,":":40,"tmain":41,"tPrint":42,"LISTA_EXP":43,"treturn":44,"tContinue":45,"tBreak":46,"id":47,"++":48,"--":49,"TIPO":50,"=":51,"[":52,"]":53,"tnew":54,"entero":55,"tlist":56,"<":57,">":58,".":59,"tadd":60,"TERNARIA":61,"?":62,"CASTEO":63,"tif":64,"ELSE":65,"telse":66,"tdo":67,"twhile":68,"tfor":69,"ACTUALIZACION_FOR":70,"LISTA_PARAM":71,"tvoid":72,"tinteger":73,"tboolean":74,"tstring":75,"tdouble":76,"tchar":77,",":78,"FUNCION_LENGUAJE":79,"ttoLower":80,"ttoUpper":81,"ttruncate":82,"tround":83,"ttoCharArray":84,"ttoString":85,"ttypeOf":86,"tlength":87,"+":88,"-":89,"*":90,"/":91,"^":92,"==":93,"!=":94,"<=":95,">=":96,"&&":97,"||":98,"PRIMITIVO":99,"decimal":100,"caracter":101,"cadena":102,"ttrue":103,"tfalse":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",28:"CONTINUE",30:"tswitch",31:"(",33:")",37:"tcase",39:"tdefault",40:":",41:"tmain",42:"tPrint",44:"treturn",45:"tContinue",46:"tBreak",47:"id",48:"++",49:"--",51:"=",52:"[",53:"]",54:"tnew",55:"entero",56:"tlist",57:"<",58:">",59:".",60:"tadd",62:"?",64:"tif",66:"telse",67:"tdo",68:"twhile",69:"tfor",72:"tvoid",73:"tinteger",74:"tboolean",75:"tstring",76:"tdouble",77:"tchar",78:",",80:"ttoLower",81:"ttoUpper",82:"ttruncate",83:"tround",84:"ttoCharArray",85:"ttoString",86:"ttypeOf",87:"tlength",88:"+",89:"-",90:"*",91:"/",92:"^",93:"==",94:"!=",95:"<=",96:">=",97:"&&",98:"||",100:"decimal",101:"caracter",102:"cadena",103:"ttrue",104:"tfalse"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[29,5],[34,3],[34,2],[35,2],[35,1],[36,3],[36,2],[38,2],[38,1],[25,3],[24,5],[26,2],[26,3],[26,2],[27,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[15,4],[16,7],[13,7],[61,5],[63,4],[14,8],[17,5],[17,6],[65,2],[65,2],[21,7],[20,9],[20,9],[19,5],[12,6],[12,6],[12,5],[12,5],[50,1],[50,1],[50,1],[50,1],[50,1],[71,4],[71,2],[43,3],[43,1],[18,3],[18,4],[70,2],[70,2],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,4],[32,6],[32,1],[32,1],[32,1],[32,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,'EOF')}; return this.$;
break;
case 2:
 this.$ = { val: 0, node: newNode(yy, yystate,'EOF')}; return this.$;
break;
case 3:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
            
break;
case 4:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
            
break;
case 5:

                       this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node,$$[$0])};
                
break;
case 6:

                        this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
                
break;
case 7: case 10: case 18: case 19:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,$$[$0])}; 
break;
case 8:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
break;
case 9: case 20: case 21: case 22: case 24: case 30:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
break;
case 11: case 12: case 13: case 16: case 17: case 23: case 25:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 14:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])}; 
break;
case 15: case 105: case 108:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 26:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};  
break;
case 27:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node,$$[$0])}; 
break;
case 28:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
break;
case 29:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,$$[$0].node)}; 
break;
case 31:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node,$$[$0].node)}; 
break;
case 32: case 33:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0].node)}; 
break;
case 34: case 112:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 35:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node, $$[$0])}; 
break;
case 36:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};  
break;
case 37:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0])};  
break;
case 38:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node,$$[$0])}; 
break;
case 39:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])}; 
break;
case 40:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
break;
case 41:

              this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
            
break;
case 42:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
            
break;
case 43:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3].node , $$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 44:

       	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])};
            
break;
case 45:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-9].node , $$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3].node,$$[$0-2],$$[$0-1],$$[$0])};
            
break;
case 46:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-7].node , $$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 47:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-10] , $$[$0-9],$$[$0-8].node,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 48:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 49:

               this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 50:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};
            
break;
case 51:

         this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 52:

        this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node,$$[$0-1],$$[$0].node)};
    
break;
case 53:

              this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-7], $$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 54:

            this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 55:

             this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3].node,$$[$0-2],$$[$0-1].node,$$[$0].node)};
        
break;
case 56:

            	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
        
break;
case 57:

	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
        
break;
case 58:

 	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};
        
break;
case 59:

          	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-8], $$[$0-7],$$[$0-6].node,$$[$0-5],$$[$0-4].node,$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 60:

           	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-8], $$[$0-7],$$[$0-6].node,$$[$0-5],$$[$0-4].node,$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 61:

         	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};   
        
break;
case 62:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5].node, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
            
break;
case 63:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
            
break;
case 64:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 65:

               this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 66:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 67: case 111:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 68:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 69: case 70:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};   
break;
case 71:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2],$$[$0-1].node,$$[$0])}; 
            
break;
case 72:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])}; 
            
break;
case 73:

             this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
        
break;
case 74:
 
            this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
        
break;
case 75:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1],$$[$0])};   
break;
case 76:
    this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2],$$[$0-1].node,$$[$0])};   
break;
case 77: case 78:

           this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
        
break;
case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
break;
case 87: case 91: case 97: case 98: case 99: case 100:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
break;
case 88: case 89: case 95: case 96: case 101:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)};  
break;
case 90: case 94:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
break;
case 92:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
break;
case 93:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
break;
case 102:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};    
break;
case 103:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3],$$[$0-2], $$[$0-1].node, $$[$0])};   
break;
case 104:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3],$$[$0-2].node, $$[$0-1],$$[$0])};  
break;
case 106:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};  
break;
case 107:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 109:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 110:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 113: case 114:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:$V0,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{1:[3]},{5:[1,43],6:44,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:$V0,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{1:[2,2]},o($Vj,[2,4]),{11:[1,45]},o($Vj,[2,8]),o($Vj,[2,9]),{11:[1,46]},o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{11:[1,47]},o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{11:[1,48]},{11:[1,49]},o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),{47:[1,50],52:$Vk},{57:[1,52]},{47:[1,53]},{31:$Vl,48:[1,58],49:[1,59],51:$Vm,52:[1,55],59:[1,54]},{31:[1,60]},{31:[1,61]},{31:[1,62]},{7:63,8:$Vn},{31:[1,65]},{18:66,47:[1,67]},{11:[1,68],18:73,31:$Vo,32:69,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{11:[1,83]},{11:[1,84]},{31:[1,85]},o($Vx,[2,66]),o($Vx,[2,67]),o($Vx,[2,68]),o($Vx,[2,69]),o($Vx,[2,70]),{1:[2,1]},o($Vj,[2,3]),o($Vj,[2,7]),o($Vj,[2,10]),o($Vj,[2,14]),o($Vj,[2,18]),o($Vj,[2,19]),{11:$Vy,31:[1,87],51:$Vz},{53:[1,88]},{50:89,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{31:[1,90]},{60:[1,91]},{52:[1,92],55:[1,93]},{18:73,31:$Vo,32:94,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:97,33:[1,95],43:96,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{11:[2,41]},{11:[2,42]},{18:73,31:$Vo,32:98,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:99,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{10:100,15:101,47:[1,103],50:102,56:$V8,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{68:[1,104]},{4:105,6:4,9:[1,106],10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:$V0,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{18:73,31:$Vo,32:97,43:107,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{11:[1,108]},{31:$Vl},o($Vj,[2,37]),{11:[1,109],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{18:73,31:$Vo,32:124,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:125,47:$Vp,50:126,55:$Vq,61:74,63:75,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($VO,[2,102],{31:$Vl,52:[1,127]}),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),o($VO,[2,108]),o($VO,[2,109]),o($VO,[2,110]),o($VO,[2,111]),o($VO,[2,112]),o($VO,[2,113]),o($VO,[2,114]),o($Vj,[2,39]),o($Vj,[2,40]),{18:73,31:$Vo,32:128,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:129,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{33:[1,131],50:132,71:130,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{47:[1,133]},{58:[1,134]},{33:[1,136],50:132,71:135,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{31:[1,137]},{55:[1,138]},{53:[1,139]},{11:[1,140],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($VO,[2,75]),{33:[1,141],78:$VP},o($VQ,[2,74],{57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),{33:[1,143],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{33:[1,144],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{11:[1,145]},{11:[1,146]},{47:[1,147],52:$Vk},{51:$Vm},{31:[1,148]},{6:44,9:[1,149],10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:$V0,29:23,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,50:24,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},o($VR,[2,6]),{33:[1,150],78:$VP},o($Vj,[2,35]),o($Vj,[2,38]),{18:73,31:$Vo,32:151,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:152,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:153,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:154,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:155,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:156,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:157,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:158,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:159,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:160,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:161,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:162,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:163,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:164,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($VO,[2,92]),{33:[1,165],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{33:[1,166]},{18:73,31:$Vo,32:167,47:$Vp,52:[1,168],55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{33:[1,169],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{11:[2,43],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{33:[1,170],78:$VS},{7:172,8:$Vn},{47:[1,173]},{51:[1,174]},{47:[1,175]},{33:[1,176],78:$VS},{7:177,8:$Vn},{18:73,31:$Vo,32:178,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{53:[1,179]},{51:[1,180]},o([5,9,11,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76,77],[2,48]),o($VO,[2,76]),{18:73,31:$Vo,32:181,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{7:182,8:$Vn},{7:183,8:$Vn},{18:73,31:$Vo,32:184,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{18:73,31:$Vo,32:185,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{11:$Vy,51:$Vz},{18:73,31:$Vo,32:186,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($VR,[2,5]),{11:[1,187]},o($VT,[2,87],{90:$VF,91:$VG,92:$VH}),o($VT,[2,88],{90:$VF,91:$VG,92:$VH}),o($VU,[2,89],{92:$VH}),o($VU,[2,90],{92:$VH}),o($VU,[2,91],{92:$VH}),o($VV,[2,94],{57:$VA,58:$VB,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,95:$VK,96:$VL}),o($VV,[2,95],{57:$VA,58:$VB,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,95:$VK,96:$VL}),o($VW,[2,96],{88:$VD,89:$VE,90:$VF,91:$VG,92:$VH}),o($VW,[2,97],{88:$VD,89:$VE,90:$VF,91:$VG,92:$VH}),o($VW,[2,98],{88:$VD,89:$VE,90:$VF,91:$VG,92:$VH}),o($VW,[2,99],{88:$VD,89:$VE,90:$VF,91:$VG,92:$VH}),o([9,11,33,40,53,78,97,98],[2,100],{57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL}),o([9,11,33,40,53,78,98],[2,101],{57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM}),{40:[1,188],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($VO,[2,93]),{18:73,31:$Vo,32:189,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{53:[1,190],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{18:73,31:$Vo,32:191,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{8:[1,193],34:192},{7:194,8:$Vn},{50:195,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},o($Vj,[2,64]),o($VX,[2,72]),{8:[1,197],54:[1,196]},{51:[1,198]},{7:199,8:$Vn},o($Vj,[2,65]),{33:[1,200],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{53:[1,201]},{18:73,31:$Vo,32:202,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($VQ,[2,73],{57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($Vj,[2,54],{65:203,66:[1,204]}),o($Vj,[2,61]),{11:[1,205],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{11:[1,206],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{33:[1,207],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($Vj,[2,36]),{18:73,31:$Vo,32:208,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($VO,[2,52]),o($VO,[2,103]),{53:[1,209],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($Vj,[2,26]),{9:[1,211],35:210,36:212,37:$VY,39:$VZ},o($Vj,[2,62]),{47:[1,215]},{50:216,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{18:73,31:$Vo,32:97,43:217,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{54:[1,218]},o($Vj,[2,63]),{11:[1,219]},{51:[1,220]},{11:[1,221],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($Vj,[2,55]),{7:223,8:$Vn,17:222,64:$V9},{47:$V_,70:224},{47:$V_,70:226},{11:[1,227]},o([9,11,33,40,53,62,78,97,98],[2,51],{57:$VA,58:$VB,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL}),{53:[1,228]},{9:[1,229],36:230,37:$VY,39:$VZ},o($Vj,[2,28]),o($V$,[2,30]),{18:73,31:$Vo,32:231,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},{38:232,40:$V01},o($VX,[2,71]),{52:[1,234]},{9:[1,235],78:$VP},{56:[1,236]},o($Vj,[2,50]),{18:73,31:$Vo,32:237,47:$Vp,55:$Vq,61:74,63:75,89:$Vr,99:76,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw},o($Vj,[2,49]),o($Vj,[2,56]),o($Vj,[2,57]),{33:[1,238]},{48:[1,239],49:[1,240]},{33:[1,241]},o($Vj,[2,58]),o($VO,[2,104]),o($Vj,[2,27]),o($V$,[2,29]),{38:242,40:$V01,57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($V$,[2,32]),o($V$,[2,34],{6:4,10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,29:23,50:24,4:243,28:$V0,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi}),{55:[1,244]},{11:[2,46]},{57:[1,245]},{11:[2,53],57:$VA,58:$VB,62:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},{7:246,8:$Vn},{33:[2,77]},{33:[2,78]},{7:247,8:$Vn},o($V$,[2,31]),o($V$,[2,33],{10:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,29:23,50:24,6:44,28:$V0,30:$V1,41:$V2,42:$V3,44:$V4,45:$V5,46:$V6,47:$V7,56:$V8,64:$V9,67:$Va,68:$Vb,69:$Vc,72:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi}),{53:[1,248]},{50:249,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},o($Vj,[2,59]),o($Vj,[2,60]),{11:[2,45]},{58:[1,250]},{11:[2,47]}],
defaultActions: {3:[2,2],43:[2,1],58:[2,41],59:[2,42],235:[2,46],239:[2,77],240:[2,78],248:[2,45],250:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 103;     
break;
case 5:   return 104;    
break;
case 6:   return 73;  
break;
case 7:   return 74;  
break;
case 8:   return 76;   
break;
case 9:   return 75;   
break;
case 10:   return 77;   
break;
case 11:   return 64;       
break;
case 12:   return 68;    
break;
case 13:   return 69;    
break;
case 14:   return 66;     
break;
case 15:   return 72;     
break;
case 16:   return 44;   
break;
case 17:   return 54;     
break;
case 18:   return 67;     
break;
case 19:   return 56;     
break;
case 20:   return 60;     
break;
case 21:   return 30;     
break;
case 22:   return 37;     
break;
case 23:   return 39;     
break;
case 24:   return 80;     
break;
case 25:   return 81;     
break;
case 26:   return 82;     
break;
case 27:   return 83;     
break;
case 28:   return 87;     
break;
case 29:   return 86;     
break;
case 30:   return 85;     
break;
case 31:   return 84;     
break;
case 32:   return 41;     
break;
case 33:   return 42;    
break;
case 34:   return 46;    
break;
case 35:   return 45;    
break;
case 36:yy_.yytext = yy_.yytext.toLowerCase();          return 47;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 102;
break;
case 38:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 101
break;
case 39:return 100
break;
case 40:return 55
break;
case 41:return 59
break;
case 42:return 48;
break;
case 43:return 49;
break;
case 44:return 88;
break;
case 45:return 89;
break;
case 46:return 90;
break;
case 47:return 91;
break;
case 48:return 92;
break;
case 49:return '%';
break;
case 50:return 31;
break;
case 51:return 33;
break;
case 52:return 93;
break;
case 53:return 51;
break;
case 54:return 78;
break;
case 55:return 40;
break;
case 56:return 11;
break;
case 57:return 62;
break;
case 58:return 98;
break;
case 59:return 97;
break;
case 60:return 94;
break;
case 61:return '!';
break;
case 62:return 95;
break;
case 63:return 96;
break;
case 64:return 58;
break;
case 65:return 57;
break;
case 66:return 8;
break;
case 67:return 9;
break;
case 68:return 52;
break;
case 69:return 53;
break;
case 70:  
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:length\b)/,/^(?:typeOf\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaAST;
exports.Parser = GramaticaAST.Parser;
exports.parse = function () { return GramaticaAST.parse.apply(GramaticaAST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}