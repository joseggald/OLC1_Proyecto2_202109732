/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaAST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,23],$V2=[1,38],$V3=[1,34],$V4=[1,33],$V5=[1,35],$V6=[1,36],$V7=[1,37],$V8=[1,28],$V9=[1,26],$Va=[1,29],$Vb=[1,32],$Vc=[1,30],$Vd=[1,31],$Ve=[1,27],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[5,9,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76,77],$Vl=[2,11],$Vm=[1,52],$Vn=[1,58],$Vo=[1,57],$Vp=[1,67],$Vq=[1,66],$Vr=[1,80],$Vs=[1,74],$Vt=[1,75],$Vu=[1,81],$Vv=[1,73],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[33,47,52,58],$VC=[2,46],$VD=[1,90],$VE=[2,5,9,28,30,37,39,41,42,44,45,46,47,56,64,66,67,68,69,72,73,74,75,76,77],$VF=[1,124],$VG=[1,125],$VH=[1,130],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[1,120],$VM=[1,121],$VN=[1,122],$VO=[1,123],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[2,9,11,33,40,53,57,58,62,78,88,89,90,91,92,93,94,95,96,97,98],$VU=[1,149],$VV=[9,33,78],$VW=[1,184],$VX=[2,9,11,33,40,53,57,58,62,78,88,89,93,94,95,96,97,98],$VY=[2,9,11,33,40,53,57,58,62,78,88,89,90,91,93,94,95,96,97,98],$VZ=[2,9,11,33,40,53,62,78,93,94,97,98],$V_=[2,9,11,33,40,53,57,58,62,78,93,94,95,96,97,98],$V$=[33,78],$V01=[1,238],$V11=[1,239],$V21=[1,251],$V31=[9,37,39],$V41=[1,265],$V51=[2,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"BREAK":27,"CONTINUE":28,"SWITCH":29,"tswitch":30,"(":31,"EXP":32,")":33,"BLOCK_SWITCH":34,"CONT_CASE":35,"CASES":36,"tcase":37,"BLOCK_CASES":38,"tdefault":39,":":40,"tmain":41,"tPrint":42,"LISTA_EXP":43,"treturn":44,"tContinue":45,"tBreak":46,"id":47,"++":48,"--":49,"TIPO":50,"=":51,"[":52,"]":53,"tnew":54,"entero":55,"tlist":56,"<":57,">":58,".":59,"tadd":60,"TERNARIA":61,"?":62,"CASTEO":63,"tif":64,"ELSE":65,"telse":66,"tdo":67,"twhile":68,"tfor":69,"ACTUALIZACION_FOR":70,"LISTA_PARAM":71,"tvoid":72,"tinteger":73,"tboolean":74,"tstring":75,"tdouble":76,"tchar":77,",":78,"FUNCION_LENGUAJE":79,"ttoLower":80,"ttoUpper":81,"ttruncate":82,"tround":83,"ttoCharArray":84,"ttoString":85,"ttypeOf":86,"tlength":87,"+":88,"-":89,"*":90,"/":91,"^":92,"==":93,"!=":94,"<=":95,">=":96,"&&":97,"||":98,"PRIMITIVO":99,"decimal":100,"caracter":101,"cadena":102,"ttrue":103,"tfalse":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",28:"CONTINUE",30:"tswitch",31:"(",33:")",37:"tcase",39:"tdefault",40:":",41:"tmain",42:"tPrint",44:"treturn",45:"tContinue",46:"tBreak",47:"id",48:"++",49:"--",51:"=",52:"[",53:"]",54:"tnew",55:"entero",56:"tlist",57:"<",58:">",59:".",60:"tadd",62:"?",64:"tif",66:"telse",67:"tdo",68:"twhile",69:"tfor",72:"tvoid",73:"tinteger",74:"tboolean",75:"tstring",76:"tdouble",77:"tchar",78:",",80:"ttoLower",81:"ttoUpper",82:"ttruncate",83:"tround",84:"ttoCharArray",85:"ttoString",86:"ttypeOf",87:"tlength",88:"+",89:"-",90:"*",91:"/",92:"^",93:"==",94:"!=",95:"<=",96:">=",97:"&&",98:"||",100:"decimal",101:"caracter",102:"cadena",103:"ttrue",104:"tfalse"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[7,3],[7,2],[7,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[29,5],[34,3],[34,2],[35,2],[35,1],[36,3],[36,2],[38,2],[38,1],[25,3],[24,5],[26,2],[26,3],[26,2],[27,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[15,4],[16,7],[13,7],[61,5],[63,4],[14,8],[17,5],[17,6],[65,2],[65,2],[21,7],[21,7],[21,7],[21,7],[20,9],[20,9],[20,9],[20,9],[20,9],[20,9],[20,9],[19,5],[19,5],[19,5],[12,6],[12,6],[12,5],[12,5],[50,1],[50,1],[50,1],[50,1],[50,1],[71,4],[71,2],[43,3],[43,1],[18,3],[18,4],[70,2],[70,2],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[32,4],[32,6],[32,1],[32,1],[32,1],[32,1],[32,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,'EOF')}; return this.$;
break;
case 2:
 this.$ = { val: 0, node: newNode(yy, yystate,'EOF')}; return this.$;
break;
case 3:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
            
break;
case 4:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
            
break;
case 5: case 8:
  
break;
case 6:

                       this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node,$$[$0])};
                
break;
case 7:

                        this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
                
break;
case 9: case 12: case 20: case 21:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,$$[$0])}; 
break;
case 10:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
break;
case 11: case 22: case 23: case 24: case 26: case 32:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};
break;
case 13: case 14: case 15: case 18: case 19: case 25: case 27:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 16:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])}; 
break;
case 17: case 117: case 120:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 28:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};  
break;
case 29:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node,$$[$0])}; 
break;
case 30:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
break;
case 31:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node,$$[$0].node)}; 
break;
case 33:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node,$$[$0].node)}; 
break;
case 34: case 35:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0].node)}; 
break;
case 36: case 125:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 37:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2],$$[$0-1].node, $$[$0])}; 
break;
case 38:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};  
break;
case 39:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0])};  
break;
case 40:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node,$$[$0])}; 
break;
case 41:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])}; 
break;
case 42:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
break;
case 43:

              this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
            
break;
case 44:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1] , $$[$0])};
            
break;
case 45:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3].node , $$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 46:

       	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])};
            
break;
case 47:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-9].node , $$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3].node,$$[$0-2],$$[$0-1],$$[$0])};
            
break;
case 48:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-7].node , $$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 49:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-10] , $$[$0-9],$$[$0-8].node,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 50:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 51:

               this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
            
break;
case 52:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};
            
break;
case 53:

         this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 54:

        this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node,$$[$0-1],$$[$0].node)};
    
break;
case 55:

              this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-7], $$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 56:

            this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 57:

             this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3].node,$$[$0-2],$$[$0-1].node,$$[$0].node)};
        
break;
case 58:

            	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
        
break;
case 59:

	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
        
break;
case 60:

 	 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0])};
        
break;
case 61: case 62: case 72: case 121:
     
break;
case 63: case 66: case 73:
      
break;
case 64:

          	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-8], $$[$0-7],$$[$0-6].node,$$[$0-5],$$[$0-4].node,$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 65:

           	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-8], $$[$0-7],$$[$0-6].node,$$[$0-5],$$[$0-4].node,$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
        
break;
case 67:
        
break;
case 68: case 69: case 70:
       
break;
case 71:

         	this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};   
        
break;
case 74:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5].node, $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
            
break;
case 75:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3],$$[$0-2].node,$$[$0-1],$$[$0].node)};
            
break;
case 76:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 77:

               this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-4], $$[$0-3],$$[$0-2],$$[$0-1],$$[$0].node)};
            
break;
case 78:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 79: case 124:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 80:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 81: case 82:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};   
break;
case 83:

                this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2],$$[$0-1].node,$$[$0])}; 
            
break;
case 84:

                 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1].node, $$[$0])}; 
            
break;
case 85:

             this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
        
break;
case 86:
 
            this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
        
break;
case 87:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1],$$[$0])};   
break;
case 88:
    this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3], $$[$0-2],$$[$0-1].node,$$[$0])};   
break;
case 89: case 90:

           this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1],$$[$0])};
        
break;
case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3],$$[$0-2],$$[$0-1].node,$$[$0])};
break;
case 99: case 103: case 109: case 110: case 111: case 112:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
break;
case 100: case 101: case 107: case 108: case 113:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)};  
break;
case 102: case 106:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1],$$[$0].node)}; 
break;
case 104:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
break;
case 105:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
break;
case 114:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};    
break;
case 115:
   this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-3],$$[$0-2], $$[$0-1].node, $$[$0])};   
break;
case 116:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0-5], $$[$0-4],$$[$0-3],$$[$0-2].node, $$[$0-1],$$[$0])};  
break;
case 118:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)};  
break;
case 119:
  this.$ = { val: 0, node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 122:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])}; 
break;
case 123:
this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
case 126: case 127:
 this.$ = { val: 0, node: newNode(yy, yystate, $$[$0])};  
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:24,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,50:25,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{1:[3]},{5:[1,44],6:45,10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:24,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,50:25,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{1:[2,2]},o($Vk,[2,4]),o($Vk,[2,5]),{11:[1,46]},o($Vk,[2,10]),o($Vk,$Vl),{11:[1,47]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),{11:[1,48]},o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),{11:[1,49]},{11:[1,50]},o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),{47:[1,51],52:$Vm},{57:[1,53]},{47:[1,54]},{31:$Vn,48:[1,59],49:[1,60],51:$Vo,52:[1,56],59:[1,55]},{31:[1,61]},{2:[1,63],31:[1,62]},{31:[1,64]},{2:$Vp,7:65,8:$Vq},{31:[1,68]},{18:69,47:[1,70]},{2:$Vr,11:[1,71],18:76,31:$Vs,32:72,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{11:[1,87]},{11:[1,88]},{31:[1,89]},o($VB,[2,78]),o($VB,[2,79]),o($VB,[2,80]),o($VB,[2,81]),o($VB,[2,82]),{1:[2,1]},o($Vk,[2,3]),o($Vk,[2,9]),o($Vk,[2,12]),o($Vk,[2,16]),o($Vk,[2,20]),o($Vk,[2,21]),{11:$VC,31:[1,91],51:$VD},{53:[1,92]},{50:93,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{31:[1,94]},{60:[1,95]},{52:[1,96],55:[1,97]},{2:$Vr,18:76,31:$Vs,32:98,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:101,33:[1,99],43:100,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{11:[2,43]},{11:[2,44]},{2:$Vr,18:76,31:$Vs,32:102,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:103,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:104,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:[1,107],10:105,15:106,47:[1,109],50:108,56:$V9,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{2:[1,111],68:[1,110]},{2:$V0,4:112,6:4,9:[1,113],10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:24,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,50:25,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},o($VE,[2,8]),{2:$Vr,18:76,31:$Vs,32:101,43:114,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{11:[1,115]},{31:$Vn},o($Vk,[2,39]),{11:[1,116],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:$Vr,18:76,31:$Vs,32:131,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:132,47:$Vt,50:133,55:$Vu,61:77,63:78,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VT,[2,114],{31:$Vn,52:[1,134]}),o($VT,[2,117]),o($VT,[2,118]),o($VT,[2,119]),o($VT,[2,120]),o($VT,[2,121]),o($VT,[2,122]),o($VT,[2,123]),o($VT,[2,124]),o($VT,[2,125]),o($VT,[2,126]),o($VT,[2,127]),o($Vk,[2,41]),o($Vk,[2,42]),{2:$Vr,18:76,31:$Vs,32:135,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:136,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{33:[1,138],50:139,71:137,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{47:[1,140]},{58:[1,141]},{33:[1,143],50:139,71:142,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{31:[1,144]},{55:[1,145]},{53:[1,146]},{11:[1,147],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($VT,[2,87]),{33:[1,148],78:$VU},o($VV,[2,86],{57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),{33:[1,150],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:[1,152],33:[1,151],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{33:[1,153],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:[1,155],11:[1,154]},{11:[1,156]},{11:[1,157]},{47:[1,158],52:$Vm},{51:$Vo},{2:[1,160],31:[1,159]},{31:[1,161]},{6:45,9:[1,162],10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,28:$V1,29:24,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,50:25,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},o($VE,[2,7]),{33:[1,163],78:$VU},o($Vk,[2,37]),o($Vk,[2,40]),{2:$Vr,18:76,31:$Vs,32:164,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:165,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:166,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:167,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:168,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:169,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:170,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:171,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:172,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:173,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:174,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:175,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:176,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:177,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VT,[2,104]),{33:[1,178],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{33:[1,179]},{2:$Vr,18:76,31:$Vs,32:180,47:$Vt,52:[1,181],55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{33:[1,182],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($Vl,[2,45],{57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),{33:[1,183],78:$VW},{2:$Vp,7:185,8:$Vq},{47:[1,186]},{51:[1,187]},{47:[1,188]},{33:[1,189],78:$VW},{2:$Vp,7:190,8:$Vq},{2:$Vr,18:76,31:$Vs,32:191,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{53:[1,192]},{51:[1,193]},o([5,9,11,28,30,37,39,41,42,44,45,46,47,56,64,67,68,69,72,73,74,75,76,77],[2,50]),o($VT,[2,88]),{2:$Vr,18:76,31:$Vs,32:194,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vp,7:195,8:$Vq},{2:$Vp,7:196,8:$Vq},{2:$Vp,7:197,8:$Vq},{2:$Vp,7:198,8:$Vq},{2:$Vr,18:76,31:$Vs,32:199,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:200,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:201,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:202,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($Vl,$VC,{51:$VD}),{2:$Vr,18:76,31:$Vs,32:203,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:204,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{2:$Vr,18:76,31:$Vs,32:205,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VE,[2,6]),{11:[1,206]},o($VX,[2,99],{90:$VK,91:$VL,92:$VM}),o($VX,[2,100],{90:$VK,91:$VL,92:$VM}),o($VY,[2,101],{92:$VM}),o($VY,[2,102],{92:$VM}),o($VY,[2,103],{92:$VM}),o($VZ,[2,106],{57:$VF,58:$VG,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,95:$VP,96:$VQ}),o($VZ,[2,107],{57:$VF,58:$VG,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,95:$VP,96:$VQ}),o($V_,[2,108],{88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o($V_,[2,109],{88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o($V_,[2,110],{88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o($V_,[2,111],{88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM}),o([2,9,11,33,40,53,78,97,98],[2,112],{57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ}),o([2,9,11,33,40,53,78,98],[2,113],{57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR}),{40:[1,207],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($VT,[2,105]),{2:$Vr,18:76,31:$Vs,32:208,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{53:[1,209],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:$Vr,18:76,31:$Vs,32:210,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{8:[1,212],34:211},{2:$Vp,7:213,8:$Vq},{50:214,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},o($Vk,[2,76]),o($V$,[2,84]),{8:[1,216],54:[1,215]},{51:[1,217]},{2:$Vp,7:218,8:$Vq},o($Vk,[2,77]),{33:[1,219],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{53:[1,220]},{2:$Vr,18:76,31:$Vs,32:221,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VV,[2,85],{57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS}),o($Vk,[2,56],{65:222,66:[1,223]}),o($Vk,[2,71]),o($Vk,[2,73]),o($Vk,[2,72]),{2:[1,225],11:[1,224],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{11:[1,226],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{11:[1,227],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{11:[1,228],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:[1,230],33:[1,229],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{33:[1,231],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{33:[1,232],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($Vk,[2,38]),{2:$Vr,18:76,31:$Vs,32:233,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($VT,[2,54]),o($VT,[2,115]),{53:[1,234],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($Vk,[2,28]),{9:[1,236],35:235,36:237,37:$V01,39:$V11},o($Vk,[2,74]),{47:[1,240]},{50:241,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},{2:$Vr,18:76,31:$Vs,32:101,43:242,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{54:[1,243]},o($Vk,[2,75]),{11:[1,244]},{51:[1,245]},{11:[1,246],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($Vk,[2,57]),{2:$Vp,7:248,8:$Vq,17:247,64:$Va},{2:[1,250],47:$V21,70:249},{47:$V21,70:252},{47:$V21,70:253},{47:$V21,70:254},{47:$V21,70:255},{11:[1,256]},{2:$Vp,7:257,8:$Vq},{2:$Vp,7:258,8:$Vq},{2:$Vp,7:259,8:$Vq},o([2,9,11,33,40,53,62,78,97,98],[2,53],{57:$VF,58:$VG,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ}),{53:[1,260]},{9:[1,261],36:262,37:$V01,39:$V11},o($Vk,[2,30]),o($V31,[2,32]),{2:$Vr,18:76,31:$Vs,32:263,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},{38:264,40:$V41},o($V$,[2,83]),{52:[1,266]},{9:[1,267],78:$VU},{56:[1,268]},o($Vk,[2,52]),{2:$Vr,18:76,31:$Vs,32:269,47:$Vt,55:$Vu,61:77,63:78,89:$Vv,99:79,100:$Vw,101:$Vx,102:$Vy,103:$Vz,104:$VA},o($Vk,[2,51]),o($Vk,[2,58]),o($Vk,[2,59]),{2:[1,271],33:[1,270]},{33:[1,272]},{48:[1,273],49:[1,274]},{33:[1,275]},{33:[1,276]},{33:[1,277]},{33:[1,278]},o($Vk,[2,60]),o($Vk,[2,62]),o($Vk,[2,61]),o($Vk,[2,63]),o($VT,[2,116]),o($Vk,[2,29]),o($V31,[2,31]),{38:279,40:$V41,57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},o($V31,[2,34]),o($V31,[2,36],{6:4,10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,29:24,50:25,4:280,2:$V0,28:$V1,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj}),{55:[1,281]},o($Vl,[2,48]),{57:[1,282]},{11:[2,55],57:$VF,58:$VG,62:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP,96:$VQ,97:$VR,98:$VS},{2:$Vp,7:283,8:$Vq},{2:$Vp,7:284,8:$Vq},{2:$Vp,7:285,8:$Vq},o($V51,[2,89]),o($V51,[2,90]),{2:$Vp,7:286,8:$Vq},{2:$Vp,7:287,8:$Vq},{2:$Vp,7:288,8:$Vq},{2:$Vp,7:289,8:$Vq},o($V31,$V51),o($V31,[2,35],{10:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:17,23:18,24:19,25:20,26:21,27:22,29:24,50:25,6:45,28:$V1,30:$V2,41:$V3,42:$V4,44:$V5,45:$V6,46:$V7,47:$V8,56:$V9,64:$Va,67:$Vb,68:$Vc,69:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj}),{53:[1,290]},{50:291,73:$Vf,74:$Vg,75:$Vh,76:$Vi,77:$Vj},o($Vk,[2,64]),o($Vk,[2,70]),o($Vk,[2,69]),o($Vk,[2,68]),o($Vk,[2,67]),o($Vk,[2,65]),o($Vk,[2,66]),o($Vl,[2,47]),{58:[1,292]},o($Vl,[2,49])],
defaultActions: {3:[2,2],44:[2,1],59:[2,43],60:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const newNode = require('../AST/ClasesArbolAST/MetodosGeneración');  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 103;     
break;
case 5:   return 104;    
break;
case 6:   return 73;  
break;
case 7:   return 74;  
break;
case 8:   return 76;   
break;
case 9:   return 75;   
break;
case 10:   return 77;   
break;
case 11:   return 64;       
break;
case 12:   return 68;    
break;
case 13:   return 69;    
break;
case 14:   return 66;     
break;
case 15:   return 72;     
break;
case 16:   return 44;   
break;
case 17:   return 54;     
break;
case 18:   return 67;     
break;
case 19:   return 56;     
break;
case 20:   return 60;     
break;
case 21:   return 30;     
break;
case 22:   return 37;     
break;
case 23:   return 39;     
break;
case 24:   return 80;     
break;
case 25:   return 81;     
break;
case 26:   return 82;     
break;
case 27:   return 83;     
break;
case 28:   return 87;     
break;
case 29:   return 86;     
break;
case 30:   return 85;     
break;
case 31:   return 84;     
break;
case 32:   return 41;     
break;
case 33:   return 42;    
break;
case 34:   return 46;    
break;
case 35:   return 45;    
break;
case 36:yy_.yytext = yy_.yytext.toLowerCase();          return 47;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 102;
break;
case 38:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 101
break;
case 39:return 100
break;
case 40:return 55
break;
case 41:return 59
break;
case 42:return 48;
break;
case 43:return 49;
break;
case 44:return 88;
break;
case 45:return 89;
break;
case 46:return 90;
break;
case 47:return 91;
break;
case 48:return 92;
break;
case 49:return '%';
break;
case 50:return 31;
break;
case 51:return 33;
break;
case 52:return 93;
break;
case 53:return 51;
break;
case 54:return 78;
break;
case 55:return 40;
break;
case 56:return 11;
break;
case 57:return 62;
break;
case 58:return 98;
break;
case 59:return 97;
break;
case 60:return 94;
break;
case 61:return '!';
break;
case 62:return 95;
break;
case 63:return 96;
break;
case 64:return 58;
break;
case 65:return 57;
break;
case 66:return 8;
break;
case 67:return 9;
break;
case 68:return 52;
break;
case 69:return 53;
break;
case 70:  
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:length\b)/,/^(?:typeOf\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaAST;
exports.Parser = GramaticaAST.Parser;
exports.parse = function () { return GramaticaAST.parse.apply(GramaticaAST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}